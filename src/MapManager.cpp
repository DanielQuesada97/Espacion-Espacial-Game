#include "../include/MapManager.h"

// Level map definitions
const char MapManager::easyMap[10][10] = {
    {'#','#','#','#','#','#','#','#','#','#'},
    {'#','P','.','.','.','.','.','.','F','#'},
    {'#','#','#','#','#','.','#','#','.','#'},
    {'#','.','.','.','#','.','#','A','.','#'},
    {'#','.','#','.','#','.','#','#','.','#'},
    {'#','.','#','.','#','.','.','.','.','#'},
    {'#','.','#','.','#','#','#','#','.','#'},
    {'#','.','#','.','.','.','.','#','.','#'},
    {'#','.','.','.','#','#','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','#'},
};

const char MapManager::mediumMap[10][20] = {
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
    {'#','P','.','.','.','#','.','.','.','.','.','.','#','.','.','.','.','.','F','#'},
    {'#','.','#','#','.','#','.','#','#','#','#','.','#','.','#','#','#','#','.','#'},
    {'#','.','#','D','.','#','.','#','A','.','#','.','#','.','#','B','.','#','.','#'},
    {'#','.','#','#','.','#','.','#','#','.','#','.','#','.','#','#','.','#','.','#'},
    {'#','.','.','.','.','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

const char MapManager::hardMap[20][20] = {
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
    {'#','P','.','.','.','#','.','.','.','.','.','.','#','.','.','.','.','.','.','#'},
    {'#','.','#','#','.','#','.','#','#','#','#','.','#','.','#','#','#','#','.','#'},
    {'#','.','#','D','.','#','.','#','A','.','#','.','#','.','#','B','.','#','.','#'},
    {'#','.','#','#','.','#','.','#','#','.','#','.','#','.','#','#','.','#','.','#'},
    {'#','.','.','.','.','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#','.','#'},
    {'#','.','#','.','.','.','#','.','.','.','.','.','#','.','.','#','.','#','.','#'},
    {'#','.','#','.','#','.','#','#','#','#','#','.','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','#','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#'},
    {'#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','.','.','.','.','.','.','#','.','.','.','.','.','.','.','.','.','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','#','.','.','.','#','.','.','.','.','.','.','.','.','.','.','#','.','#'},
    {'#','.','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','.','.','#','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','F','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

MapManager::MapManager() : rows(0), cols(0) {}

void MapManager::loadLevel(int difficulty) {
    if (difficulty == 1) {
        rows = 10; cols = 10;
        map = std::vector<std::vector<char>>(rows, std::vector<char>(cols));
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                map[i][j] = easyMap[i][j];
    } else if (difficulty == 2) {
        rows = 10; cols = 20;
        map = std::vector<std::vector<char>>(rows, std::vector<char>(cols));
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                map[i][j] = mediumMap[i][j];
    } else if (difficulty == 3) {
        rows = 20; cols = 20;
        map = std::vector<std::vector<char>>(rows, std::vector<char>(cols));
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                map[i][j] = hardMap[i][j];
    }
}

void MapManager::setCell(int x, int y, char value) {
    if (x >= 0 && x < rows && y >= 0 && y < cols) {
        map[x][y] = value;
    }
}

char MapManager::getCell(int x, int y) const {
    if (x >= 0 && x < rows && y >= 0 && y < cols) {
        return map[x][y];
    }
    return '#';
}

bool MapManager::isTank(char c) const {
    return c == 'A' || c == 'B';
}

bool MapManager::isWall(int x, int y) const {
    return map[x][y] == '#';
}

bool MapManager::isValid(int x, int y) const {
    return !(isWall(x, y) || map[x][y] == 'D');
}

bool MapManager::isValidForBot(int x, int y, char atmosphere, bool canBreak) const {
    if (x < 0 || x >= rows || y < 0 || y >= cols) return false;
    char cell = map[x][y];

    // Can always move to open spaces, tanks, and finish
    if (cell == '.' || cell == 'F' || isTank(cell)) return true;

    // Can move through open doors
    if (cell == 'O') return true;

    // Can move through doors if we have atmosphere A
    if (cell == 'D' && atmosphere == 'A') return true;

    // Walls are handled in the pathfinding algorithm based on energy
    if (cell == '#') return false;

    return false;
} 