#include "../include/MapManager.h"

// Level map definitions
const char MapManager::easyMap[10][10] = {
    {'#','#','#','#','#','#','#','#','#','#'},
    {'#','.','A','.','D','.','.','#','F','#'},
    {'#','#','#','.','#','.','#','#','#','#'},
    {'#','.','.','B','#','.','#','A','.','#'},
    {'#','.','#','.','#','.','#','#','.','#'},
    {'#','.','#','.','D','.','.','.','.','#'},
    {'#','.','#','.','#','#','#','#','.','#'},
    {'#','.','#','.','.','.','.','#','.','#'},
    {'#','.','.','.','#','#','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','#'},
};

const char MapManager::mediumMap[10][20] = {
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
    {'#','.','.','.','D','#','B','.','.','D','#','.','D','.','#','.','.','.','F','#'},
    {'#','.','#','#','.','#','.','#','#','#','#','.','#','.','#','#','#','#','.','#'},
    {'#','.','.','A','.','#','.','.','#','.','#','A','#','.','#','B','.','#','.','#'},
    {'#','.','#','#','.','#','.','#','#','.','#','.','#','.','#','#','.','#','.','#'},
    {'#','D','.','.','.','D','B','.','.','.','#','.','D','.','.','.','.','#','.','#'},
    {'#','.','#','#','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','.','.','.','.','#','.','.','.','.','.','.','#','.','#','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#','.','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

const char MapManager::hardMap[20][20] = {
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
    {'#','.','.','A','.','#','.','#','.','.','.','.','#','B','.','.','D','.','.','#'},
    {'#','.','#','#','.','#','.','#','#','#','#','.','#','.','#','#','#','#','.','#'},
    {'#','.','#','.','B','#','.','#','A','.','#','.','#','.','#','B','.','#','.','#'},
    {'#','.','#','#','.','#','.','#','#','.','#','D','#','.','#','#','.','#','.','#'},
    {'#','A','.','.','.','D','B','#','.','.','#','.','.','.','.','.','.','#','.','#'},
    {'#','#','#','#','D','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','B','.','D','.','#','.','.','V','.','.','.','#','.','#','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','.','#','.','#','.','#'},
    {'#','.','#','.','.','.','#','.','.','.','.','.','#','.','.','#','.','#','.','#'},
    {'#','.','#','D','#','.','#','#','#','#','#','.','#','#','#','#','.','#','.','#'},
    {'#','.','.','.','#','A','.','D','.','.','#','B','.','.','D','.','.','#','.','#'},
    {'#','#','#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','.','.','.','.','.','.','#','B','.','.','D','.','.','.','.','.','.','#'},
    {'#','.','#','#','#','#','#','.','#','#','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','#','.','.','.','#','.','.','.','.','D','.','.','.','.','.','#','.','#'},
    {'#','.','#','.','#','.','#','#','#','#','#','#','#','#','#','#','#','#','.','#'},
    {'#','.','.','.','#','.','.','.','.','.','.','A','.','.','.','.','.','D','.','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','F','#'},
    {'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
};

MapManager::MapManager() : rows(0), cols(0) {}

void MapManager::loadLevel(int difficulty) {
    struct LevelInfo {
        int rows, cols;
        const char* map;
    };
    
    static const LevelInfo levels[] = {
        {10, 10, reinterpret_cast<const char*>(easyMap)},
        {10, 20, reinterpret_cast<const char*>(mediumMap)},
        {20, 20, reinterpret_cast<const char*>(hardMap)}
    };
    
    if (difficulty >= 1 && difficulty <= 3) {
        const LevelInfo& level = levels[difficulty - 1];
        rows = level.rows;
        cols = level.cols;
        map = std::vector<std::vector<char>>(rows, std::vector<char>(cols));
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                map[i][j] = level.map[i * cols + j];
            }
        }
    }
}

void MapManager::setCell(int x, int y, char value) {
    if (x >= 0 && x < rows && y >= 0 && y < cols) {
        map[x][y] = value;
    }
}

char MapManager::getCell(int x, int y) const {
    if (x >= 0 && x < rows && y >= 0 && y < cols) {
        return map[x][y];
    }
    return '#';
}

bool MapManager::isTank(char c) const {
    return c == 'A' || c == 'B';
}

bool MapManager::isWall(int x, int y) const {
    return map[x][y] == '#';
}

bool MapManager::isValid(int x, int y) const {
    return !(isWall(x, y) || map[x][y] == 'D');
}

bool MapManager::isValidForBot(int x, int y, char atmosphere, bool canBreak) const {
    if (x < 0 || x >= rows || y < 0 || y >= cols) return false;
    char cell = map[x][y];

    if (cell == '.' || cell == 'F' || isTank(cell)) return true;

    if (cell == 'O') return true;

    if (cell == 'D' && atmosphere == 'A') return true;

    if (cell == '#' && canBreak) return true;

    if (cell == '#') return false;

    return false;
} 
